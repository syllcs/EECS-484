CREATE TABLE USERS (
USER_ID NUMBER PRIMARY KEY,
FIRST_NAME VARCHAR2(100) NOT NULL,
LAST_NAME VARCHAR2(100) NOT NULL,
YEAR_OF_BIRTH INTEGER NOT NULL,
MONTH_OF_BIRTH INTEGER NOT NULL,
DAY_OF_BIRTH INTEGER NOT NULL,
GENDER VARCHAR2(100) NOT NULL);

CREATE TABLE FRIENDS (
USER1_ID NUMBER,
USER2_ID NUMBER
PRIMARY KEY (USER1_ID, USER2_ID),
FOREIGN KEY (USER1_ID) REFERENCES USERS(USER_ID),
FOREIGN KEY (USER2_ID) REFERENCES USERS(USER_ID));

CREATE TRIGGER order_friends_pairs
	BEFORE INSERT ON FRIENDS
	FOR EACH ROW
		DECLARE temp NUMBER;
		BEGIN
			IF :NEW.USER1_ID > :NEW.USER2_ID THEN
				temp := :NEW.USER2_ID;
				:NEW.USER2_ID := :NEW.USER1_ID;
				:NEW.USER1_ID := temp;
			END IF;
		END;
/

CREATE TABLE CITIES (
CITY_ID INTEGER PRIMARY KEY,
CITY_NAME VARCHAR2(100),
STATE_NAME VARCHAR2(100),
COUNTRY_NAME VARCHAR2(100));

CREATE TABLE USER_CURRENT_CITIES (
USER_ID NUMBER PRIMARY KEY,
CURRENT_CITY_ID INTEGER NOT NULL,
FOREIGN KEY (USER_ID) REFERENCES USERS,
FOREIGN KEY (CURRENT_CITY_ID) REFERENCES CITIES(CITY_ID));

CREATE TABLE USER_HOMETOWN_CITIES (
USER_ID NUMBER PRIMARY KEY,
HOMETOWN_CITY_ID INTEGER NOT NULL,
FOREIGN KEY (USER_ID) REFERENCES USERS,
FOREIGN KEY (HOMETOWN_CITY_ID) REFERENCES CITIES(CITY_ID));

CREATE TABLE MESSAGES (
MESSAGE_ID NUMBER PRIMARY KEY,
SENDER_ID NUMBER NOT NULL,
RECEIVER_ID NUMBER NOT NULL,
MESSAGE_CONTENT VARCHAR2(2000) NOT NULL,
SENT_TIME TIMESTAMP NOT NULL,
FOREIGN KEY (SENDER_ID) REFERENCES USERS(USER_ID),
FOREIGN KEY (RECEIVER_ID) REFERENCES USERS(USER_ID));

CREATE TABLE PROGRAMS (
PROGRAM_ID INTEGER PRIMARY KEY,
INSTITUTION VARCHAR2(100),
CONCENTRATION VARCHAR2(100),
DEGREE VARCHAR2(100));

CREATE TABLE EDUCATION (
USER_ID NUMBER PRIMARY KEY,
PROGRAM_ID INTEGER NOT NULL,
PROGRAM_YEAR INTEGER,
FOREIGN KEY USER_ID REFERENCES USERS,
FOREIGN KEY PROGRAM_ID REFERENCES PROGRAMS);



CREATE TABLE USER_EVENTS (
	event_id INTEGER PRIMARY KEY,
	creator_id INTEGER NOT NULL,
	event_name CHAR(20),
	event_tagline CHAR(20),
	event_description CHAR(20),
	event_type CHAR(20),
	event_subtype CHAR(20),
	event_host CHAR(20),
	event_city CHAR(20),
	event_state CHAR(20),
	event_country CHAR(20),
	event_start DATETIME,
	event_end DATETIME,
	UNIQUE (creator_id),
	FOREIGN KEY (creator_id) REFERENCES USERS(user_id)
);

CREATE TABLE PARTICIPANTS(
	user_id INTEGER,
	event_id INTEGER,
	status CHAR(20),

	PRIMARY KEY (user_id, event_id),
	FOREIGN KEY (user_id) REFERENCES USERS,
	FOREIGN KEY (event_id) REFERENCES USER_EVENTS
);

CREATE TABLE ALBUMS(
	album_id INTEGER PRIMARY KEY,
	cover_photo_id INTEGER NOT NULL,
	album_name CHAR(20),
	album_created_time DATETIME,
	album_moldified_time DATETIME,
	album_link CHAR(20),
	album_visibility CHAR(20),

	UNIQUE (cover_photo_id),
	FOREIGN KEY (user_id) REFERENCES USERS;
	FOREIGN KEY (cover_photo_id) REFERENCES PHOTOS (photo_id)
);

CREATE TABLE PHOTOS(
	photo_id INTEGER PRIMARY KEY,
	photo_name CHAR(20),
	photo_uploaded_time DATETIME,
	photo_moldified_time DATETIME,
	photo_link CHAR(20),
	photo_caption CHAR(20)
);

CREATE TABLE PHOTOS_BELONG(
	album_id INTEGER PRIMARY KEY,
	photo_id INTEGER NOT NULL,
	FOREIGN KEY (album_id) REFERENCES ALBUM,
	FOREIGN KEY (photo_id) REFERENCES PHOTOS
);

CREATE TABLE TAG(
	photo_id INTEGER,
	user_id INTEGER,
	tag_x INTEGER,
	tag_y INTEGER,
	tag_time_applied DATATIME,
	PRIMARY KEY (photo_id, user_id),
	FOREIGN KEY (photo_id) REFERENCES PHOTOS,
	FOREIGN KEY (user_id) REFERENCES USERS
);